/*
 * This file is part of Dependency-Track Jenkins plugin.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jenkinsci.plugins.DependencyTrack.model;

import edu.umd.cs.findbugs.annotations.NonNull;
import edu.umd.cs.findbugs.annotations.Nullable;
import java.io.Serializable;
import java.util.List;
import lombok.EqualsAndHashCode;
import lombok.Value;

@Value
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class Vulnerability implements Serializable {

    private static final long serialVersionUID = 2921629806625084133L;

    @EqualsAndHashCode.Include
    private final String uuid;
    private final String source;
    private final String vulnId;
    private final String title;
    private final String subtitle;
    private final String description;
    private final String recommendation;
    private final Severity severity;
    private final Integer severityRank;
    private final Integer cweId;
    private final String cweName;

    @Nullable
    private List<String> aliases;

    /**
     * checks whether this vulnerability is an alias of the given other
     * vulnerability
     *
     * @param other the other vulnerability to check against
     * @return {@code true} if the {@code other} vulnerability contains this
     * vulnerability as an alias
     */
    public boolean isAliasOf(@NonNull final Vulnerability other) {
        return other.aliases != null && other.aliases.contains(vulnId);
    }

    /**
     * checks whether the given other vulnerability is an alias of this
     * vulnerability
     *
     * @param alias the possible alias to check
     * @return {@code true} if this vulnerability contains the other as an alias
     */
    public boolean hasAlias(@NonNull final Vulnerability alias) {
        return aliases != null && aliases.contains(alias.vulnId);
    }
}
